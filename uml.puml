@startuml
class TerritoryModel {
~ int numberOfArmies
- Point location
- String name
~ Color owner
~ String continent
+ int getNumberOfArmies()
+ boolean isOwned()
+ Color getOwner()
+ Point getLocation()
+ String getName()
+ void setOwner(Color)
+ void changeArmyAmountBy(int)
+ String getContinent()
+ boolean equals(Object)
+ int hashCode()
}
class SixSidedDie {
~ Random random
+ int roll()
}
class PlayerModel {
- int numberOfUnplacedArmies
- Color color
- ArrayList<Card> cards
+ int getNumberOfUnplacedArmies()
+ Color getColor()
+ void setNumberOfUnplacedArmies(int)
+ void addNumberOfUnplacedArmies(int)
+ void placeArmy()
+ void addCard(Card)
+ int getCardCount()
+ Card getCardAtIndex(int)
+ void removeCard(Card)
}
interface StartingOptionsObserver {
~ void setNumberOfPlayers(int)
~ void setLocale(Locale)
~ void startGame()
}
abstract class StartingOptionsObservable {
# Set<StartingOptionsObserver> observers
+ void addObserver(StartingOptionsObserver)
+ void removeObserver(StartingOptionsObserver)
}
class TurnController {
~ TerritoryMapController territories
~ ArrayList<PlayerModel> playerModels
~ String currentAttacker
~ int currentPlayer
~ ArrayList<Integer> attackerRolls
~ ArrayList<Integer> defenderRolls
~ String currentDefender
~ boolean getsCard
~ String territoryRemovedFrom
~ ResourceBundle messages
~ int attackerRollCount
~ int defenderRollCount
~ int setsTurnedIn
- SixSidedDie die
~ GamePhase gamePhase
- GameView gameView
- void verifyPlayerOwnsTerritoryAndTerritoryExists(String)
- void addArmyToTerritory(String)
~ int calculateNumberOfArmies()
~ boolean hasWon()
~ void determineBattleWinner()
- void captureTerritory(String)
+ void moveTroops(int)
- void startNextPhase()
+ void territoryPressed(String,boolean)
- void reinforcingPhase(String,boolean)
- void subtractArmyFromTerritory(String)
- void placingPhase(String)
- void attackingPhase(String)
+ void tradeInCards()
- void determineCardToRemoveAndRemoveThem(ArrayList<Card>,ArrayList<Card>,ArrayList<Card>)
- void removeCardsFromHandAndAddUnplacedArmiesToPlayer(ArrayList<Card>)
- int calculateNumberOfUnplacedArmiesToAddForTurningInCards()
+ int playerRolls()
- void updateBattleResults()
- void getDiceAmount()
- int numberOfArmiesFromContinent()
+ void determineNumberOfRolls(int)
~ void incrementCurrentPlayer()
- boolean isOut()
- void drawCard()
+ void nextPhase()
}
enum GamePhase {
+  PLACING
+  TRADING
+  ATTACKING
+  REINFORCING
}
class MainController {
+ {static} void main(String[])
+ void run()
}
class InitializationController {
- StartingOptionsView startingOptionsView
- TerritoryMapController territories
- Locale locale
- int numberOfPlayers
+ void run()
+ TerritoryMapController getTerritoryMapController()
+ void setNumberOfPlayers(int)
+ void setLocale(Locale)
+ void startGame()
}
class StartingOptionsView {
- JButton[] playerNumberButtons
- int selectedPlayerButtonIndex
- {static} int numberOfPlayerButtons
- JButton[] localizationButtons
- int selectedLocalizationIndex
- {static} int numberOfLocalizationButtons
- {static} Color selectedColor
- void addPlayerButtonsPanelToFrame(JFrame)
- void addPlayerButtonsToPanel(JPanel)
- void correctlyHighlightSelectedPlayerButton()
- void addLocalizationButtonsPanelToFrame(JFrame)
- void addLocalizationButtonsToPanel(JPanel)
- void correctlyHighlightSelectedLocalizationButton()
- void addStartGamePanelToFrame(JFrame)
~ void notifyObserversOfPlayerCount()
~ void notifyObserversOfLocale()
~ void notifyObserversToStartGame()
}
abstract class GameViewObservable {
# Set<GameViewObserver> observers
+ void addObserver(GameViewObserver)
+ void removeObserver(GameViewObserver)
}
class ColorFactory {
+ {static} Color createColor(String)
}
interface GameViewObserver {
~ void territoryPressed(String,boolean)
~ void tradeInCards()
~ int playerRolls()
~ void nextPhase()
~ void determineNumberOfRolls(int)
~ void moveTroops(int)
}
class SetupController {
~ {static} int twoPlayersStartingInfantry
~ {static} int threePlayersStartingInfantry
~ {static} int fourPlayersStartingInfantry
~ {static} int fivePlayersStartingInfantry
- int numberOfPlayers
~ int currentPlayer
- ResourceBundle messages
~ int[] startingRolls
~ GameState gameState
~ ArrayList<PlayerModel> playerModels
~ TerritoryMapController territories
~ PlayerModel neutralPlayer
~ int twoPlayerGameArmiesPlacedOnTurn
- SixSidedDie die
- GameView gameView
~ void initializePlayers()
- int getStartingInfantryFor(int)
+ void run()
+ int playerRolls()
- void setupPhase()
~ void twoPlayerSetupPhase()
- void placeArmies()
- void dealCards()
+ void replaceCards()
~ void determineFirstPlayer()
+ void territoryPressed(String,boolean)
- void stillUnclaimedTerritoriesClaiming(String,TerritoryModel)
- void allTerritoriesClaimedStillUnplacedArmies(String,TerritoryModel)
- boolean isTwoPlayerGame()
+ void nextPhase()
+ void determineNumberOfRolls(int)
+ void tradeInCards()
+ void moveTroops(int)
- void claimTerritory(String)
- void addOneArmyToTerritory(String)
~ boolean doPlayersHaveUnplacedArmies()
~ void incrementCurrentPlayer()
}
enum GameState {
+  ROLLING
+  CLAIMING
+  PLAYING
}
class Card {
- String territoryName
- String troopType
+ String getTerritoryName()
+ String getTroopType()
}
class GameView {
- {static} int FRAME_WIDTH
- {static} int FRAME_HEIGHT
- {static} int GAME_BAR_PANEL_HEIGHT
- {static} GameView gameView
- int numberOfPlayers
- JFrame frame
- JLayeredPane mapPane
- JPanel gameBarPanel
- JLabel gameState
- JLabel errorLabel
- JLabel diceLabel
- JLabel cardLabel
- JButton nextPhaseLabel
- JButton submit
- JSlider attackCount
- JSlider troopCount
- BufferedImage territoryImage
- int territorySize
- HashMap<String,JLabel> territoryCircles
- HashMap<String,JLabel> territoryArmyCounts
- ResourceBundle messages
+ {static} void create(int,HashMap<String,Point>)
+ {static} GameView getGameView()
+ int getNumberOfPlayers()
+ ResourceBundle getResourceBundle()
- void initializeFrame()
- void initializeMapPane()
- void initializeGameStateLabel()
- void initializeAttackCount()
- void initializeTroopCount()
- void initializeDiceLabel()
- void initializeCardLabel()
- void initializeNextPhaseLabel()
- void initializeGameBarPanel()
- void addMap()
- void addPlayerIcons()
~ {static} void changeImageToColor(BufferedImage,Color)
- void addTerritories(HashMap<String,Point>)
- void addTerritoryArmyCount(String,Point)
- void addTerritoryListener(String)
+ void updateCurrentPlayerRollingLabel(int)
+ void updateCurrentPlayerClaimingLabel(int)
+ void updateCurrentPlayerTrading(int,int)
+ void updateCurrentPlacingDisplay(int,int)
+ void updatePlaceNeutralArmy()
+ void updateCurrentAttackingDisplay(int)
+ void updateCurrentReinforcingDisplay(int,int)
+ void updateStateToDefenderRoll()
+ void updateStateNonAdjacentMove()
+ void updateErrorLabel(String)
+ void highlightTerritory(String)
+ void removeHighlight(String)
+ void showWinMessage(int)
+ void showAttackCount(int)
+ void showTroopMovementCount(int)
+ void closeFrame()
- ImageIcon scaleImage(int,int,String)
+ void updateTerritoryOwnerDisplay(String,Color)
+ void updateTerritoryArmyCountDisplay(String,int)
}
class StaticResourceBundle {
- {static} ResourceBundle resourceBundle
+ {static} void createResourceBundle(Locale)
+ {static} ResourceBundle getResourceBundle()
}
class TerritoryMapController {
~ ArrayList<TerritoryModel> allTerritories
~ ArrayList<Card> deck
~ ArrayList<Edge> edges
+ void addTerritory(TerritoryModel)
+ void addCard(Card)
+ HashMap<String,Point> getNameLocationHashMap()
+ TerritoryModel getTerritoryByName(String)
+ boolean areThereUnclaimedTerritories()
+ void addEdge(String,String)
+ boolean areTerritoriesAdjacent(String,String)
+ boolean areTerritoriesConnectedByOwnedTerritories(String,String)
- boolean recursiveSearch(String,String,Edge)
- void setTraversedFalseForAllEdges()
- ArrayList<Edge> getAllNotTraversedEdgesConnectedToTerritoryOfSameOwner(String)
+ int calculateNumberOfTerritoriesPlayerOwns(PlayerModel)
+ void shuffleDeck()
+ void setDeck(ArrayList<Card>)
+ boolean ownsContinentAsia(Color)
- ArrayList<String> getAllTerritoriesInContinent(String)
+ boolean ownsContinentEurope(Color)
+ boolean ownsContinentNorthAmerica(Color)
+ boolean ownsContinentSouthAmerica(Color)
+ boolean ownsContinentAfrica(Color)
+ boolean ownsContinentAustralia(Color)
+ {static} TerritoryMapController loadTerritoryXMLData()
- {static} TerritoryMapController readTerritoriesXML()
- {static} void addEdgeMapFromXML(TerritoryMapController)
}
class TerritoryMapController.Edge {
- String t1
- String t2
+ boolean traversed
+ String getT1()
+ String getT2()
+ boolean equals(Object)
+ int hashCode()
}


GameViewObserver <|.. TurnController
Runnable <|.. MainController
Runnable <|.. InitializationController
StartingOptionsObserver <|.. InitializationController
StartingOptionsObservable <|-- StartingOptionsView
Runnable <|.. SetupController
GameViewObserver <|.. SetupController
GameViewObservable <|-- GameView
TerritoryMapController +.. TerritoryMapController.Edge
@enduml