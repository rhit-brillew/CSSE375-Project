plugins {
    id 'java'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.7.0"
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.5.1'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'risk.engine.MainController'
        )
    }
}

dependencies {
    compile 'junit:junit:4.12', 'org.easymock:easymock:3.4'
}

checkstyle {
    toolVersion '8.41'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

spotbugsMain {
    excludeFilter = file("$projectDir/config/spotbugs/excludeFilter.xml")
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    excludeFilter = file("$projectDir/config/spotbugs/excludeFilter.xml")
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    ignoreFailures = true
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

pitest {
    targetClasses = ['risk.model.*', 'risk.controller.SetupController',
                     'risk.controller.TurnController', 'risk.controller.TerritoryMapController',
                     'risk.controller.TwoPlayerFeature']  //by default "${project.group}.*"
    targetTests = ['risk.model.*', 'risk.controller.SetupControllerTest',
                   'risk.controller.TurnControllerTest', 'risk.controller.TestTerritoryMapController',
                   'risk.controller.TwoPlayerFeatureTest']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    //junit5PluginVersion = '0.12'  // needed only if using junit5+
}
